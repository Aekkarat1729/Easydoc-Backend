const NotificationService = require('../services/notificationService');

class NotificationEmitter {
  static io = null;

  static setSocketIO(io) {
    this.io = io;
  }

  static async emitToUser(userId, notification) {
    if (this.io) {
      this.io.to(`user_${userId}`).emit('notification', notification);
      
      await this.updateUnreadCount(userId);
    }
  }

  static async emitToUsers(userIds, notification) {
    if (this.io && Array.isArray(userIds)) {
      userIds.forEach(userId => {
        this.io.to(`user_${userId}`).emit('notification', notification);
      });
    }
  }

  static async notifyDocumentReceived(receiverId, senderName, documentTitle, sentId) {
    try {
      // ‡πÉ‡∏ä‡πâ notification service ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const result = await NotificationService.createDocumentNotification(
        receiverId,
        null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ senderId ‡πÉ‡∏ô parameter ‡πÄ‡∏î‡∏¥‡∏°
        documentTitle,
        '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'
      );
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö real-time ‡∏ú‡πà‡∏≤‡∏ô socket
      await this.emitToUser(receiverId, result.notification);
      
      console.log(`üìÑ Document notification sent to user ${receiverId} (${result.recipient.name})`);
      return result.notification;
      
    } catch (error) {
      console.error('Error notifying document received:', error);
      throw error;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  static async notifyDocumentReceivedWithEmail(receiverId, senderId, documentTitle) {
    try {
      const result = await NotificationService.createDocumentNotification(
        receiverId,
        senderId,
        documentTitle,
        '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'
      );
      
      // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö real-time ‡∏ú‡πà‡∏≤‡∏ô socket
      await this.emitToUser(receiverId, result.notification);
      
      console.log(`üìÑüìß Document notification with email sent to user ${receiverId} (${result.recipient.name})`);
      return result;
      
    } catch (error) {
      console.error('Error notifying document received with email:', error);
      throw error;
    }
  }

  static async notifyDocumentReplied(originalSenderId, replierName, documentTitle, sentId) {
    try {
      const notification = await NotificationService.createNotification(
        originalSenderId,
        'document_replied',
        '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
        `${replierName} ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${documentTitle}" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß`,
        { sentId, type: 'document_replied' }
      );
      
      await this.emitToUser(originalSenderId, notification);
      return notification;
    } catch (error) {
    }
  }

  static async notifyDocumentForwarded(originalSenderId, forwarderName, receiverName, documentTitle, sentId) {
    try {
      const notification = await NotificationService.createNotification(
        originalSenderId,
        'document_forwarded',
        '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠',
        `${forwarderName} ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${documentTitle}" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡πÉ‡∏´‡πâ ${receiverName}`,
        { sentId, type: 'document_forwarded' }
      );
      
      await this.emitToUser(originalSenderId, notification);
      return notification;
    } catch (error) {
    }
  }

  static async notifyDocumentStatusChanged(userId, changerName, documentTitle, oldStatus, newStatus, sentId) {
    try {
      const statusMap = {
        'PENDING': '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        'SENT': '‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß',
        'RECEIVED': '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
        'READ': '‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        'DONE': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        'ARCHIVED': '‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£'
      };

      const notification = await NotificationService.createNotification(
        userId,
        'status_changed',
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
        `${changerName} ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${documentTitle}" ‡∏à‡∏≤‡∏Å ${statusMap[oldStatus]} ‡πÄ‡∏õ‡πá‡∏ô ${statusMap[newStatus]}`,
        { sentId, oldStatus, newStatus, type: 'status_changed' }
      );
      
      await this.emitToUser(userId, notification);
      return notification;
    } catch (error) {
    }
  }

  static async notifySystemAlert(userIds, title, message, data = null) {
    try {
      const notifications = [];
      
      for (const userId of userIds) {
        const notification = await NotificationService.createNotification(
          userId,
          'system_alert',
          title,
          message,
          { ...data, type: 'system_alert' }
        );
        notifications.push(notification);
      }
      
      await this.emitToUsers(userIds, notifications[0]);
      
      return notifications;
    } catch (error) {
    }
  }

  static async updateUnreadCount(userId) {
    try {
      const count = await NotificationService.getUnreadCount(userId);
      
      if (this.io) {
        this.io.to(`user_${userId}`).emit('unread_count_updated', { count });
      }
      
      return count;
    } catch (error) {
    }
  }
}

module.exports = NotificationEmitter;