// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ---------- Enums ----------
 */
enum Role {
  USER
  ADMIN
  OFFICER
}

enum DocumentStatus {
  PENDING
  SENT
  RECEIVED
  READ
  DONE
  ARCHIVED
}

/**
 * ---------- Models ----------
 */
model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  password    String
  role        Role     @default(USER)
  position    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  documents       Document[]
  sentDocs        Sent[]              @relation("Sender")
  receivedDocs    Sent[]              @relation("Receiver")
  statusChanges   Sent[]              @relation("StatusBy")
  statusHistories SentStatusHistory[] @relation("UserStatusHistory")
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  fileType   String
  fileUrl    String
  uploadedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  // ความสัมพันธ์กับ Sent ที่อ้างถึงเอกสาร "หลัก" ของแต่ละรายการ
  sent Sent[] @relation("DocumentSent")
}

model Sent {
  id          Int   @id @default(autoincrement())
  documentId  Int
  // ✅ เก็บไฟล์หลายไฟล์เป็น array ของ documentId
  documentIds Int[] @default([])

  senderId   Int
  receiverId Int

  number      String?
  category    String?
  description String?
  subject     String?
  remark      String?

  status DocumentStatus @default(PENDING)

  isForwarded  Boolean @default(false)
  parentSentId Int?
  parentSent   Sent?   @relation("Forward", fields: [parentSentId], references: [id])
  forwarded    Sent[]  @relation("Forward")

  threadId        Int?
  depth           Int       @default(0)
  sentAt          DateTime  @default(now())
  receivedAt      DateTime?
  readAt          DateTime?
  archivedAt      DateTime?
  statusChangedAt DateTime?

  statusById Int?
  statusBy   User? @relation("StatusBy", fields: [statusById], references: [id])

  document Document @relation("DocumentSent", fields: [documentId], references: [id])
  sender   User     @relation("Sender", fields: [senderId], references: [id])
  receiver User     @relation("Receiver", fields: [receiverId], references: [id])

  statusHistory SentStatusHistory[]

  @@index([parentSentId])
  @@index([threadId, depth])
  @@index([status])
}

model SentStatusHistory {
  id          Int            @id @default(autoincrement())
  sentId      Int
  from        DocumentStatus
  to          DocumentStatus
  changedById Int
  changedAt   DateTime       @default(now())
  note        String?

  sent      Sent @relation(fields: [sentId], references: [id], onDelete: Cascade)
  changedBy User @relation("UserStatusHistory", fields: [changedById], references: [id])
}
